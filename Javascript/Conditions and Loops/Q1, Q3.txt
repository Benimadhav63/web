Q1) What are conditional statements? Explain conditional statements with syntax and examples.
Ans1) Conditional statements in JavaScript allow you to execute specific blocks of code based on conditions. If the condition meets then a particular block of action will be executed otherwise it will execute another block of action that satisfies that particular condition.

There are several methods that can be used to perform Conditional Statements in JavaScript.

if Statement
if-else Statement
else if Statement
switch Statement
Ternary Operator
We will explore all the above methods along with their basic implementation with the help of examples.

JavaScript if Statement
The if statement is used to evaluate a particular condition. If the condition holds true, the associated code block is executed.

Syntax:
if ( condition ) {
    // If the condition is met, 
    //code  will get executed.
}

Example: In this example, we are using the if statement to find given number is even or odd.
let num = 20;   
if (num % 2 === 0) { 
    console.log("Given number is even number."); 
}   
if (num % 2 !== 0) { 
    console.log("Given number is odd number."); 
};

Output
Given number is even number.
JavaScript if-else Statement
The if-else statement will perform some action for a specific condition. Here we are using the else statement in which the else statement is written after the if statement and it has no condition in their code block.

Syntax:
if (condition1) {
    // Executes when condition1 is true
    if (condition2) {
        // Executes when condition2 is true
    }
}

Example: In this example, we are using the above-explained approach.
let age = 25;   
if (age >= 18) { 
    console.log("You are eligible of driving licence") 
} else { 
    console.log("You are not eligible for driving licence") 
};
Output
you are eligible of driving licence
JavaScript else if Statement
The else if statement in JavaScript allows handling multiple possible conditions and outputs, evaluating more than two options based on whether the conditions are true or false.

Syntax:
if (1st condition) {
    // Code for 1st condition
} else if (2nd condition) {
    // ode for 2nd condition
} else if (3rd condition) {
    // Code for 3rd condition
} else {
    //  ode that will execute if all 
    // above conditions are false
}

Example: In this example, we are using the above-explained approach.
const num = 0;   
if (num > 0) { 
    console.log("Given number is positive."); 
} else if (num < 0) { 
    console.log("Given number is negative."); 
} else { 
    console.log("Given number is zero."); 
};

Output
Given number is zero.
JavaScript Switch Statement (JavaScript Switch Case)
As the number of conditions increases, you can use multiple else-if statements in JavaScript. but when we dealing with many conditions, the switch statement may be a more preferred option.

Syntax:
switch (expression) {
    case value1:
        statement1;
        break;
    case value2:
        statement2;
        break;
    . . .
    case valueN:
        statementN;
        break;
    default:
        statementDefault;
};

Example: In this example, we find a branch name Based on the student’s marks, this switch statement assigns a specific engineering branch to the variable Branch. The output displays the student’s branch name,

const marks = 85;   
let Branch;   
switch (true) { 
    case marks >= 90: 
        Branch = "Computer science engineering"; 
        break; 
    case marks >= 80: 
        Branch = "Mechanical engineering"; 
        break; 
    case marks >= 70: 
        Branch = "Chemical engineering"; 
        break; 
    case marks >= 60: 
        Branch = "Electronics and communication"; 
        break; 
    case marks >= 50: 
        Branch = "Civil engineering"; 
        break; 
    default: 
        Branch = "Bio technology"; 
        break; 
} 
  
console.log(`Student Branch name is : ${Branch}`);
Output
Student Branch name is : Mechanical engineering
JavaScript Ternary Operator ( ?: )
The conditional operator, also referred to as the ternary operator (?:), is a shortcut for expressing conditional statements in JavaScript.

Syntax:
condition ? value if true : value if false

Example: In this example, we use the ternary operator to check if the user’s age is 18 or older. It prints eligibility for voting based on the condition.
let age = 21;   
const result = 
    (age >= 18) ? "You are eligible to vote."
        : "You are not eligible to vote."; 
  
console.log(result);
Output
You are eligible to vote.

____________________________________________________________________________________________________________________________________________________________________________________


Q3. What are loops, and what do we need them? Explain different types of loops with their syntax and
examples.
Ans3. Looping in programming languages is a feature that facilitates the execution of a set of instructions/functions repeatedly while some condition evaluates to true. For example, suppose we want to print “Hello World” 10 times. This can be done in two ways as shown below:

Iterative Method: The iterative method to do this is to write the console.log() statement 10 times. 

console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
console.log("Hello World");
Using Loops: In Loop, the statement needs to be written only once and the loop will be executed 10 times as shown below: 

for (let i = 0; i < 10; i++) {
    console.log("Hello World!");
}
Many things may seem confusing to you in the above program at this point of time but do not worry you will be able to understand everything about loops in JavaScript by the end of this tutorial. You can observe that in the above program using loops, we have used the console.log statement only once but still, the output of the program will be the same as that of the iterative program where we have used the console.log statement 10 times. In computer programming, a loop is a sequence of instructions that is repeated until a certain condition is reached.


An operation is done, such as getting an item of data and changing it, and then some condition is checked such as whether a counter has reached a prescribed number.
Counter not Reached: If the counter has not reached the desired number, the next instruction in the sequence returns to the first instruction in the sequence and repeats it.
Counter reached: If the condition has been reached, the next instruction “falls through” to the next sequential instruction or branches outside the loop.
There are mainly two types of loops:

Entry Controlled Loop: In these types of loops, the test condition is tested before entering the loop body. The for Loop and while Loop are entry-controlled loops.
Exit Controlled Loop: In these types of loops the test condition is tested or evaluated at the end of the loop body. Therefore, the loop body will execute at least once, irrespective of whether the test condition is true or false. The do-while loop is exit controlled loop.
JavaScript mainly provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition-checking time. Let us learn about each one of these in detail.

while loop: A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement. 

Syntax :

while (boolean condition) {
    loop statements...
}
Flowchart:

 while loop

While loop starts with checking the condition. If it is evaluated to be true, then the loop body statements are executed otherwise first statement following the loop is executed. For this reason, it is also called the Entry control loop
Once the condition is evaluated to be true, the statements in the loop body are executed. Normally the statements contain an updated value for the variable being processed for the next iteration.
When the condition becomes false, the loop terminates which marks the end of its life cycle.
for loop: for loop provides a concise way of writing the loop structure. Unlike while loop, a for statement consumes the initialization, condition, and increment/decrement in one line thereby providing a shorter, easy-to-debug structure of looping. 

Syntax:

for (initialization; testing condition; increment/decrement) {
    statement(s)
}
Flowchart:


 

Initialization condition: Here, we initialize the variable in use. It marks the start of a for loop. An already declared variable can be used or a variable can be declared, local to loop only.
Testing Condition: It is used for testing the exit condition for a loop. It must return a boolean value. It is also an Entry Control Loop as the condition is checked prior to the execution of the loop statements.
Statement execution: Once the condition is evaluated to be true, the statements in the loop body are executed.
Increment/ Decrement: It is used for updating the variable for the next iteration.
Loop termination: When the condition becomes false, the loop terminates marking the end of its life cycle.
do-while: The do-while loop is similar to the while loop with the only difference is that it checks for the condition after executing the statements, and therefore is an example of an Exit Control Loop. 

Syntax:

do {
    Statements..
}
while (condition);
Flowchart:

 do-while

The do-while loop starts with the execution of the statement(s). There is no checking of any condition for the first time.
After the execution of the statements and update of the variable value, the condition is checked for a true or false value. If it is evaluated to be true, the next iteration of the loop starts.
When the condition becomes false, the loop terminates which marks the end of its life cycle.
It is important to note that the do-while loop will execute its statements at least once before any condition is checked and therefore is an example of the exit control loop.
Infinite loop: One of the most common mistakes while implementing any sort of looping is that it may not ever exit, i.e. the loop runs for infinite times. This happens when the condition fails for some reason. 

Example: This example shows an infinite loop.

// JavaScript program to illustrate infinite loop
 
// Infinite loop because condition is not false
// condition should have been i>0.
for (let i = 5; i != 0; i -= 2) {
    console.log(i);
}
 
let x = 5;
 
// Infinite loop because update statement
// is not provided
while (x == 5) {
    console.log("In the loop");
}
Here are some more loops used in Javascript these days:

For-in: For-in loop in JavaScript is used to iterate over the properties of an object. The for-in loop iterates only over those keys of an object which have their enumerable property set to “true”.
